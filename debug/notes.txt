2019/05/27

set debuger mode:
    export FLASK_DEBUG=1

url routing:
    1. variable using:
     /x/<variable_name>
     /x/<converter(e.g. int):variable_name>

    2. rules:
     /projects/ == /projects/ or /projects, (think of projects as a folder)

     /about == /about only, trying to access /about/ leads to 404, (imagine that 'about' is a file)
    
url building:
    use 'url_for(method_name, [arguments])' to get the routing url of method:'method_name' 

HTTP methods:
    @app.route('/', methods=['GET', 'POST'])

    condition [request.method == 'post'] won't work as 'post' must be capitalized to 'POST'


2019/05/28

template rendering: for html files

request object:
    'method' attribute for request method(POST or GET), e.g. if request.method == 'GET'
    'form' attribute retrieves form data, e.g. request.form['username']
    'args' attribute accesses the parameters in URL, e.g. request.args.get('key','')
    'files' attribute handles uploaded files, e.g. request.files['the_file']
    'cookies' attribute deals with cookies (OF COURSE!), e.g. request.cookies.get('key')

Redirects and Errors:
    redirect(url_for('function_name')) redirects the URL
    abort(401) aborts the request early
    @app.errorhandler(404), can return rendered error page instead of the default one.

status code 302: redirect

2019/06/14

not quite clear and understand what output fields does.

a flask application usually needs a project structure including three parts(the routes, the resources and any common infrastructure) like this:

myapi/
    __init__.py
    app.py 	# the file contains the app and routes
    resources/
        __init__.py
        foo.py  # contains the logic fro /foo
        bar.py  $ contains the logic for /bar
    common/
        __init__.py
        util.py    # some common infrastructure
